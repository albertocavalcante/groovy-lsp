---
name: CI
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      disable_scan:
        description: Disable Gradle build scan
        required: false
        type: boolean
        default: false
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' }}
jobs:
  build:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    permissions:
      checks: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(github.event_name == 'pull_request' && '["ubuntu-latest"]' || '["ubuntu-latest", "macos-latest"]') }}
        java: ${{ fromJSON(github.event_name == 'pull_request' && '[17]' || '[17, 21]') }}
        exclude:
          - os: macos-latest
            java: 21
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master' }}
      - name: Set Gradle scan flag
        shell: bash
        run: |-
          if [[ "${{ github.event.inputs.disable_scan }}" == "true" ]]; then
            echo "GRADLE_SCAN_FLAG=-Dorg.gradle.scan=false" >> $GITHUB_ENV
          else
            echo "GRADLE_SCAN_FLAG=" >> $GITHUB_ENV
          fi
      - name: Validate Gradle Wrapper
        run: ./gradlew --version
      - name: Compile Kotlin
        run: ./gradlew compileKotlin compileTestKotlin --stacktrace $GRADLE_SCAN_FLAG
      - name: Run Quality Checks
        run: ./gradlew lint --stacktrace $GRADLE_SCAN_FLAG
      - name: Run Tests
        run: ./gradlew test --stacktrace $GRADLE_SCAN_FLAG
      - name: Run Code Coverage
        run: ./gradlew koverHtmlReport koverXmlReport --stacktrace $GRADLE_SCAN_FLAG
      - name: SonarCloud Analysis
        if: matrix.os == 'ubuntu-latest' && matrix.java == 17 && ((github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main' && github.event.pull_request.head.repo.full_name == github.repository))
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --info $GRADLE_SCAN_FLAG
      - name: Generate Test Report
        uses: dorny/test-reporter@v2
        if: success() || failure()
        with:
          name: Test Results (${{ matrix.os }} - Java ${{ matrix.java }})
          path: build/test-results/test/*.xml
          reporter: java-junit
      - name: Build Shadow JAR
        run: ./gradlew shadowJar --stacktrace $GRADLE_SCAN_FLAG
      - name: Verify JAR
        run: |-
          echo "Testing JAR with --help flag..."
          java -jar build/libs/groovy-lsp-*-SNAPSHOT.jar --help
      - name: Upload JAR artifact
        if: matrix.os == 'ubuntu-latest' && matrix.java == 17
        uses: actions/upload-artifact@v4
        with:
          name: groovy-lsp-jar
          path: build/libs/groovy-lsp-*-SNAPSHOT.jar
          retention-days: 7
      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-java${{ matrix.java }}
          path: |-
            build/test-results/
            build/reports/tests/
          retention-days: 7
  validate:
    name: Validation Check
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Check build status
        run: |-
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "Build failed or was cancelled"
            exit 1
          fi
          echo "✅ All checks passed!"
  dependency-check:
    name: Check Dependencies
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 17
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
      - name: Check for dependency updates
        run: ./gradlew dependencyUpdates --refresh-dependencies || true
        continue-on-error: true
---
name: Release Please
"on":
  push:
    branches:
      - main
  workflow_dispatch: null
permissions:
  contents: write
  pull-requests: write
jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: googleapis/release-please-action@c2a5a2bd6a758a0937f1ddb1e8950609867ed15c
        with:
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
---
name: Release
"on":
  push:
    tags:
      - v*
  workflow_dispatch:
    inputs:
      version:
        description: Release version (e.g., v1.0.0)
        required: false
        type: string
        default: manual
      dry_run:
        description: Dry run (don't create release)
        required: false
        type: boolean
        default: false
permissions:
  contents: write
  id-token: write
jobs:
  build-release:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        java:
          - 17
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: ${{ matrix.java }}
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v5
        with:
          cache-read-only: false
      - name: Set build environment variables
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.version }}" = "manual" ] || [ -z "${{ github.event.inputs.version }}" ]; then
              VERSION="manual-$(date +%Y%m%d-%H%M%S)"
            else
              VERSION="${{ github.event.inputs.version }}"
            fi
          else
            VERSION="${{ github.ref_name }}"
          fi

          echo "Release version: ${VERSION}"
          echo "BUILD_VERSION=${VERSION}" >> $GITHUB_ENV
          echo "BUILD_COMMIT=${{ github.sha }}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
      - name: Validate Gradle Wrapper
        run: ./gradlew --version
      - name: Verify version detection
        run: |
          echo "Verifying smart version detection..."
          ./gradlew printVersion
          echo "Expected release version (without SNAPSHOT): ${BUILD_VERSION#v}"
      - name: Compile and Test
        run: ./gradlew compileKotlin compileTestKotlin test --stacktrace
      - name: Build Shadow JAR
        run: ./gradlew shadowJar --stacktrace
      - name: Test JAR
        shell: bash
        run: |
          echo "Testing JAR with --help flag..."
          java -jar build/libs/groovy-lsp*.jar --help
      - name: Prepare artifacts
        shell: bash
        run: |
          mkdir -p dist
          # Copy JAR with version in filename
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cp build/libs/groovy-lsp*.jar dist/groovy-lsp-${BUILD_VERSION#v}-linux-amd64.jar
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            cp build/libs/groovy-lsp*.jar dist/groovy-lsp-${BUILD_VERSION#v}-darwin-amd64.jar
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp build/libs/groovy-lsp*.jar dist/groovy-lsp-${BUILD_VERSION#v}-windows-amd64.jar
          fi
      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ matrix.os }}
          path: dist/*
          retention-days: 7
  create-release:
    name: Create Release
    needs: build-release
    runs-on: ubuntu-latest
    if: ${{ !inputs.dry_run }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          merge-multiple: true
          path: artifacts
      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p dist
          echo "Downloaded artifacts:"
          find artifacts -type f -name "*.jar" | sort

          # Move all artifacts to dist directory
          cp -r artifacts/* dist/ 2>/dev/null || true

          # Generate checksums
          cd dist
          if ls *.jar 1> /dev/null 2>&1; then
            sha256sum *.jar > checksums.txt
            echo "Checksums generated:"
            cat checksums.txt
          fi
      - name: Generate release notes
        id: release_notes
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.version }}" = "manual" ] || [ -z "${{ github.event.inputs.version }}" ]; then
              VERSION="manual-$(date +%Y%m%d-%H%M%S)"
            else
              VERSION="${{ github.event.inputs.version }}"
            fi
          else
            VERSION="${{ github.ref_name }}"
          fi

          cat > release-notes.md <<EOF
          ## Groovy LSP ${VERSION}

          ### Installation

          Download the appropriate JAR for your platform:

          \`\`\`bash
          # Download JAR (replace linux-amd64 with your platform)
          curl -LO https://github.com/${{ github.repository }}/releases/download/${VERSION}/groovy-lsp-${VERSION#v}-linux-amd64.jar

          # Verify checksum
          curl -LO https://github.com/${{ github.repository }}/releases/download/${VERSION}/checksums.txt
          sha256sum -c checksums.txt --ignore-missing

          # Run the Language Server
          java -jar groovy-lsp-${VERSION#v}-linux-amd64.jar
          \`\`\`

          ### Supported Platforms

          - **Linux AMD64** \`groovy-lsp-${VERSION#v}-linux-amd64.jar\`
          - **macOS AMD64** \`groovy-lsp-${VERSION#v}-darwin-amd64.jar\`
          - **Windows AMD64** \`groovy-lsp-${VERSION#v}-windows-amd64.jar\`

          ### Usage

          The Groovy Language Server provides IDE features for Groovy development including:
          - Code completion
          - Syntax highlighting
          - Error checking
          - Go to definition
          - Find references

          ### What's Changed

          <!-- GitHub will auto-generate this section -->

          ---

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v0.0.1...${VERSION}
          EOF
      - name: Determine release settings
        id: release_info
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.version }}" = "manual" ] || [ -z "${{ github.event.inputs.version }}" ]; then
              VERSION="manual-$(date +%Y%m%d-%H%M%S)"
              IS_PRERELEASE=true
              IS_DRAFT=true
            else
              VERSION="${{ github.event.inputs.version }}"
              IS_PRERELEASE=${{ contains(github.event.inputs.version, '-rc') || contains(github.event.inputs.version, '-beta') || contains(github.event.inputs.version, '-alpha') || contains(github.event.inputs.version, 'manual') }}
              IS_DRAFT=true
            fi
          else
            VERSION="${{ github.ref_name }}"
            IS_PRERELEASE=${{ contains(github.ref_name, '-rc') || contains(github.ref_name, '-beta') || contains(github.ref_name, '-alpha') }}
            IS_DRAFT=false
          fi

          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is_prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          echo "is_draft=${IS_DRAFT}" >> $GITHUB_OUTPUT

          echo "Release settings:"
          echo "- Version: ${VERSION}"
          echo "- Prerelease: ${IS_PRERELEASE}"
          echo "- Draft: ${IS_DRAFT}"
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_info.outputs.version }}
          draft: ${{ steps.release_info.outputs.is_draft }}
          prerelease: ${{ steps.release_info.outputs.is_prerelease }}
          name: Groovy LSP ${{ steps.release_info.outputs.version }}
          body_path: release-notes.md
          generate_release_notes: true
          files: |
            dist/groovy-lsp-*.jar
            dist/checksums.txt
          fail_on_unmatched_files: false
          make_latest: ${{ steps.release_info.outputs.is_prerelease == 'false' }}
      - name: Release summary
        shell: bash
        run: "echo \"✅ Release created successfully!\"\necho \"\U0001F4E6 Version: ${{ steps.release_info.outputs.version }}\"\necho \"\U0001F3F7️ Tag: ${{ steps.release_info.outputs.version }}\"\necho \"\U0001F4DD Draft: ${{ steps.release_info.outputs.is_draft }}\"\necho \"\U0001F516 Prerelease: ${{ steps.release_info.outputs.is_prerelease }}\"\necho \"\"\necho \"\U0001F517 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.release_info.outputs.version }}\"\necho \"\"\necho \"\U0001F4CB Artifacts included:\"\ncd dist\nfor file in groovy-lsp-*.jar checksums.txt; do\n  if [[ -f \"$file\" ]]; then\n    size=$(ls -lh \"$file\" | awk '{print $5}')\n    echo \"  - $file ($size)\"\n  fi\ndone"
---
build:
  maxIssues: 100
  excludeCorrectable: false
config:
  validation: true
  warningsAsErrors: false
complexity:
  active: true
  CyclomaticComplexMethod:
    active: true
    threshold: 15
  LongMethod:
    active: true
    threshold: 60
  LongParameterList:
    active: true
    functionThreshold: 6
    constructorThreshold: 7
    ignoreDefaultParameters: false
    ignoreDataClasses: true
  LargeClass:
    active: true
    threshold: 600
  TooManyFunctions:
    active: true
    excludes:
      - '**/dsl/**'
      - '**/test/**'
      - '**/visitor/**'
      - '**/AstVisitor.kt'
    thresholdInFiles: 20
    thresholdInClasses: 18
    thresholdInInterfaces: 13
    thresholdInObjects: 13
    thresholdInEnums: 5
coroutines:
  active: true
  SleepInsteadOfDelay:
    active: true
empty-blocks:
  active: true
  EmptyCatchBlock:
    active: true
    allowedExceptionNameRegex: _|(ignore|expected).*
  EmptyFunctionBlock:
    active: true
exceptions:
  active: true
  TooGenericExceptionCaught:
    active: true
    excludes:
      - '**/test/**'
    exceptionNames:
      - ArrayIndexOutOfBoundsException
      - Error
      - Exception
      - IllegalMonitorStateException
      - NullPointerException
      - IndexOutOfBoundsException
      - RuntimeException
      - Throwable
  SwallowedException:
    active: true
    ignoredExceptionTypes:
      - InterruptedException
      - NumberFormatException
      - ParseException
      - MalformedURLException
    allowedExceptionNameRegex: _|(ignore|expected).*
formatting:
  active: true
  android: false
  autoCorrect: true
  NoWildcardImports:
    active: true
    autoCorrect: true
  NoUnusedImports:
    active: true
    autoCorrect: true
  FinalNewline:
    active: true
    autoCorrect: true
  MaximumLineLength:
    active: true
    maxLineLength: 120
  NoTrailingSpaces:
    active: true
    autoCorrect: true
  NoSemicolons:
    active: true
    autoCorrect: true
  ImportOrdering:
    active: true
    autoCorrect: true
  ModifierOrdering:
    active: true
    autoCorrect: true
  NoConsecutiveBlankLines:
    active: true
    autoCorrect: true
  SpacingBetweenPackageAndImports:
    active: true
    autoCorrect: true
  ArgumentListWrapping:
    active: true
    autoCorrect: true
naming:
  active: true
  ClassNaming:
    active: true
    classPattern: '[A-Z][a-zA-Z0-9]*'
  FunctionNaming:
    active: true
    excludes:
      - '**/test/**'
    functionPattern: ^([a-z][a-zA-Z0-9]*)|(`.*`)$
  PackageNaming:
    active: true
    packagePattern: '[a-z]+(\.[a-z][A-Za-z0-9]*)*'
  VariableNaming:
    active: true
    variablePattern: '[a-z][A-Za-z0-9]*'
performance:
  active: true
  ForEachOnRange:
    active: true
    excludes:
      - '**/test/**'
  SpreadOperator:
    active: true
    excludes:
      - '**/test/**'
potential-bugs:
  active: true
  EqualsAlwaysReturnsTrueOrFalse:
    active: true
  IteratorHasNextCallsNextMethod:
    active: true
  IteratorNotThrowingNoSuchElementException:
    active: true
  UnnecessaryNotNullOperator:
    active: true
  UnnecessarySafeCall:
    active: true
  UnreachableCode:
    active: true
  UnsafeCallOnNullableType:
    active: true
  UnsafeCast:
    active: true
style:
  active: true
  ForbiddenComment:
    active: true
    comments:
      - 'STOPSHIP:'
      - 'XXX:'
  LoopWithTooManyJumpStatements:
    active: true
  MaxLineLength:
    active: true
    maxLineLength: 120
    excludePackageStatements: true
    excludeImportStatements: true
  MagicNumber:
    active: true
    excludes:
      - '**/test/**'
    ignoreNumbers:
      - -1
      - 0
      - 1
      - 2
    ignoreHashCodeFunction: true
    ignorePropertyDeclaration: false
    ignoreLocalVariableDeclaration: false
    ignoreConstantDeclaration: true
    ignoreCompanionObjectPropertyDeclaration: true
    ignoreAnnotation: false
    ignoreNamedArgument: true
    ignoreEnums: false
    ignoreRanges: false
    ignoreExtensionFunctions: true
  ReturnCount:
    active: true
    max: 3
    excludedFunctions:
      - equals
    excludeLabeled: false
    excludeReturnFromLambda: true
    excludeGuardClauses: true
  UnusedImports:
    active: true
  UnusedParameter:
    active: true
    allowedNames: ignored|_
  UnusedPrivateClass:
    active: true
  UnusedPrivateMember:
    active: true
  UseCheckNotNull:
    active: true
  UseRequire:
    active: true
  UseRequireNotNull:
    active: true
  WildcardImport:
    active: true
    excludes:
      - '**/test/**'
---
pre-commit:
  commands:
    yaml-format:
      glob: '*.{yml,yaml}'
      run: yq -i -P '.' {staged_files}
